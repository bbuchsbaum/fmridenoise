% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ndx_rpca.R
\name{ndx_rpca_temporal_components_multirun}
\alias{ndx_rpca_temporal_components_multirun}
\title{Perform Multi-Run Robust PCA and Extract Temporal Nuisance Components}
\usage{
ndx_rpca_temporal_components_multirun(
  Y_residuals_cat,
  run_idx,
  k_global_target,
  user_options = list()
)
}
\arguments{
\item{Y_residuals_cat}{A numeric matrix of concatenated residuals from all runs
(total_timepoints x voxels).}

\item{run_idx}{A numeric vector indicating run membership for each row (timepoint)
in `Y_residuals_cat`.}

\item{k_global_target}{Integer, the target number of global temporal nuisance
components to be returned (columns in the output matrix).}

\item{user_options}{A list of user-configurable options:
- `k_per_run_target` (integer): Target rank for the L component in per-run RPCA. 
  Defaults to `k_global_target` if not specified or if larger.
  It's the `k` passed to `rpca::rpca` for each run.
- `rpca_term_delta` (numeric): Convergence tolerance for rpca (passed as `term.delta`). Default: 1e-6.
- `rpca_max_iter` (integer): Maximum iterations for rpca (passed as `max.iter`). Default: 2000.
- `rpca_trace` (logical): If TRUE, rpca will print progress messages. Default: FALSE.
- `rpca_mu` (numeric): Mu parameter for rpca. Default: NULL (auto by rpca package).
- `rpca_lambda_auto` (logical): If TRUE (default), calculate lambda for each run as 
  `1/sqrt(max(dim(Er_t)))`. If FALSE, use `rpca_lambda_fixed`.
- `rpca_lambda_fixed` (numeric): Fixed lambda value if `rpca_lambda_auto` is FALSE.
- `rpca_merge_strategy` (character): Strategy for merging voxel-space components.
  Options are "concat_svd" or "iterative". Default: "concat_svd".}
}
\value{
A list with elements `C_components` and `spike_TR_mask`. `C_components` is a
matrix of concatenated temporal nuisance components (total_timepoints x
k\_global\_target). `spike_TR_mask` is a logical vector flagging TRs with
non-zero sparse activity. The mask length is validated against
`nrow(Y_residuals_cat)` and padded or truncated with a warning if necessary.
Returns NULL if errors occur or no components generated.
}
\description{
This function implements a multi-run RPCA strategy. It performs RPCA on each
run's transposed residuals (voxels x time) to obtain voxel-space principal components (Vr).
These Vr components are then merged across runs using Grassmann averaging to find a
global voxel-space nuisance basis (V_global). Finally, per-run residuals are
projected onto V_global to get run-specific temporal nuisance regressors (Cr),
which are then concatenated.
This approach is designed to be memory-efficient and respect fMRI geometry.
}
\examples{
\dontrun{
# --- Simulate multi-run data ---
T_run <- 50; V <- 30; N_runs <- 2
total_T <- T_run * N_runs
Y_res_cat <- matrix(rnorm(total_T * V), total_T, V)
run_idx_vec <- rep(1:N_runs, each = T_run)

# Add some shared low-rank structure (voxel-space pattern, different temporal expression)
true_V_pattern <- matrix(rnorm(V*2), V, 2) # 2 global voxel patterns
for (r in 1:N_runs) {
  run_rows <- which(run_idx_vec == r)
  # Run-specific temporal modulation of these voxel patterns
  C_r_signal_run1 <- sin((1:T_run)/5 + r) * 3 + cos((1:T_run)/10 - r/2) * 2
  C_r_signal_run2 <- cos((1:T_run)/3 - r) * 2.5 + sin((1:T_run/8) + r/3) * 3
  Y_res_cat[run_rows, ] <- Y_res_cat[run_rows, ] + 
                           cbind(C_r_signal_run1, C_r_signal_run2) \%*\% t(true_V_pattern)
}

k_target_final <- 3
user_opts_mrpca <- list(
  k_per_run_target = 5, # Keep a bit more per run initially
  rpca_term_delta = 1e-4, # Relax tolerance for example speed
  rpca_max_iter = 50, # Reduced for example speed
  rpca_lambda_auto = TRUE
)

C_components <- ndx_rpca_temporal_components_multirun(
  Y_residuals_cat = Y_res_cat, 
  run_idx = run_idx_vec, 
  k_global_target = k_target_final, 
  user_options = user_opts_mrpca
)

if (!is.null(C_components)) {
  print(paste("Dimensions of concatenated C components:", 
              paste(dim(C_components), collapse="x")))
  # plot(C_components[,1], type='l', main="First Global RPCA Temporal Component")
}
}
}
