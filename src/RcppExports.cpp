// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// apply_ar_filter_matrix_cpp
NumericMatrix apply_ar_filter_matrix_cpp(const NumericMatrix& M, const NumericVector& ar_coeffs);
RcppExport SEXP _ndx_apply_ar_filter_matrix_cpp(SEXP MSEXP, SEXP ar_coeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ar_coeffs(ar_coeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_ar_filter_matrix_cpp(M, ar_coeffs));
    return rcpp_result_gen;
END_RCPP
}
// apply_ar_filter_voxelwise_cpp
NumericMatrix apply_ar_filter_voxelwise_cpp(const NumericMatrix& Y, const NumericMatrix& coeffs);
RcppExport SEXP _ndx_apply_ar_filter_voxelwise_cpp(SEXP YSEXP, SEXP coeffsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type coeffs(coeffsSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_ar_filter_voxelwise_cpp(Y, coeffs));
    return rcpp_result_gen;
END_RCPP
}
// grassmann_merge_iterative_cpp
List grassmann_merge_iterative_cpp(List V_list, int k_target_global);
RcppExport SEXP _ndx_grassmann_merge_iterative_cpp(SEXP V_listSEXP, SEXP k_target_globalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type V_list(V_listSEXP);
    Rcpp::traits::input_parameter< int >::type k_target_global(k_target_globalSEXP);
    rcpp_result_gen = Rcpp::wrap(grassmann_merge_iterative_cpp(V_list, k_target_global));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ndx_apply_ar_filter_matrix_cpp", (DL_FUNC) &_ndx_apply_ar_filter_matrix_cpp, 2},
    {"_ndx_apply_ar_filter_voxelwise_cpp", (DL_FUNC) &_ndx_apply_ar_filter_voxelwise_cpp, 2},
    {"_ndx_grassmann_merge_iterative_cpp", (DL_FUNC) &_ndx_grassmann_merge_iterative_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ndx(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
